<!DOCTYPE html>
<html>
<head>
  <title>Room Monitor</title>
  <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"
        integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/style.css"/>
  <link rel="stylesheet" href="/stylesheets/DateTimePicker.css"/>
  <script src="//code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
          crossorigin="anonymous"></script>
  <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"
          integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"
          crossorigin="anonymous"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"></script>
  <script src="/javascripts/DateTimePicker.js"></script>
</head>
<body>
<div class="container">
  <div class="row title-app">
    <h1 class="text-center">Room Monitor</h1>
  </div>

  <!-- controls -->
  <div class="row controls vertical-align">
    <div class="col-sm-5">
      <div class="text-center">
        Start Date: <input class="input-start text-center" type="text" data-field="datetime" readonly>
      </div>
    </div>
    <div class="col-sm-5">
      <div class="text-center">
        End Date: <input class="input-end text-center" type="text" data-field="datetime" readonly>
      </div>
    </div>
    <div class="col-sm-2">
      <button class="btn btn-primary btn-sm btn-search">
        <span class="glyphicon glyphicon-search"></span>
      </button>
      <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target=".settings-modal">
        <span class="glyphicon glyphicon-cog"></span>
      </button>
    </div>
  </div>

  <!-- graphs -->
  <div class="row container-graph">
    <h3 class="title-graph">Temperature</h3>
    <canvas id="chart-temperature" width="400" height="150"></canvas>
  </div>
  <div class="row container-graph">
    <h3 class="title-graph">Humidity</h3>
    <canvas id="chart-humidity" width="400" height="150"></canvas>
  </div>
</div>

<!-- datetime box -->
<div id="dtBox"></div>

<!-- modal -->
<div class="modal fade settings-modal" tabindex="-1" role="dialog" aria-labelledby="settingsModal">
  <div class="modal-dialog" role="dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
            aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="settingsModal">Settings</h4>
      </div>
      <div class="modal-body">
        <div class="row vertical-align">
          <div class="col-sm-6 text-center">
            Monitoring Interval
          </div>
          <div class="col-sm-6 text-center">
            <div class="input-group input-group-interval">
              <input type="text" class="form-control input-interval" aria-describedby="interval-units">
              <span class="input-group-addon" id="interval-units">seconds</span>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary btn-save">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    var monitoringInterval = null;

    /**
     * Formats a Date object to a string.
     *
     * @param date
     */
    function formatDate(date) {
      var year = date.getFullYear();
      var month = ("0" + (date.getMonth() + 1)).slice(-2);
      var day = ("0" + date.getDate()).slice(-2);
      var hour = ("0" + date.getHours()).slice(-2);
      var minutes = ("0" + date.getMinutes()).slice(-2);

      return year + "-" + month + "-" + day + " " + hour + ":" + minutes;
    }

    /**
     * Creates a line chart.
     *
     * @param ctx
     * @param labelName
     */
    function createLineChart(ctx, labelName, color) {
      var color = color || "75,192,192";
      var data = {
        labels: [],
        datasets: [
          {
            label: labelName,
            fill: false,
            lineTension: 0.1,
            backgroundColor: "rgba(" + color + ",0.4)",
            borderColor: "rgba(" + color + ",1)",
            borderCapStyle: "butt",
            borderDash: [],
            borderDashOffset: 0.0,
            borderJoinStyle: "miter",
            pointBorderColor: "rgba(" + color + ",1)",
            pointBackgroundColor: "#fff",
            pointBorderWidth: 1,
            pointHoverRadius: 5,
            pointHoverBackgroundColor: "rgba(" + color + ",1)",
            pointHoverBorderColor: "rgba(220,220,220,1)",
            pointHoverBorderWidth: 2,
            pointRadius: 1,
            pointHitRadius: 10,
            data: []
          }
        ]
      };

      return new Chart(ctx, {
        type: 'line',
        data: data,
        options: {
          legend: {
            display: false
          }
        }
      });
    }

    /**
     * Updates the charts data and re-renders it.
     *
     * @param chart
     * @param labels
     * @param data
     */
    function updateChartData(chart, labels, data) {
      chart.data.labels = labels;
      chart.data.datasets[0].data = data;
      chart.update();
    }

    /**
     * Fetches new data from the server with the corresponding dates and resets the charts.
     *
     * @param startDate
     * @param endDate
     */
    function refreshCharts() {
      var startDate = $inputStart.val();
      var endDate = $inputEnd.val();

      $.ajax({
        url: "/data/within-dates",
        method: "GET",
        data: {
          startDate: startDate,
          endDate: endDate
        },
        dataType: "json"
      }).done(function (data) {
        var labels = data.labels;
        var temperature = data.temperature;
        var humidity = data.humidity;

        updateChartData(temperatureChart, labels, temperature);
        updateChartData(humidityChart, labels, humidity);

      }).fail(function (jqXHR, textStatus) {
        console.log("Request failed while refreshing charts: " + textStatus);
      });
    }

    /**
     * Fetches the monitoring interval setting from the server and sets the value to the corresponding input field.
     */
    function refreshMonitoringInterval() {
      $.ajax({
        url: "/settings/interval",
        method: "GET",
        dataType: "json"
      }).done(function (response) {
        if (response.interval) {
          monitoringInterval = response.interval;
          $(".input-interval").val(monitoringInterval);
        }
      }).fail(function (jqXHR, textStatus) {
        console.log("Request failed while refreshing interval: " + textStatus);
      });
    }

    // initialize DateTimePicker
    $("#dtBox").DateTimePicker({
      dateTimeFormat: "yyyy-MM-dd HH:mm",
      titleContentDateTime: "",
      buttonsToDisplay: ["SetButton", "ClearButton"],
      animationDuration: 200
    });

    // initialize input fields
    var $inputStart = $(".input-start");
    var $inputEnd = $(".input-end");
    $inputStart.val(formatDate(new Date((new Date()).setDate(new Date().getDate() - 1)))); // current date - 1 day
    $inputEnd.val(formatDate(new Date()));
    refreshMonitoringInterval();

    // add listeners
    $(".btn-search").on("click", function () {
      refreshCharts();
    });
    $(".input-interval").on("keypress", function () {
      $(".btn-save").show();
    });
    $(".btn-save").on("click", function () {
      $(".btn-save").prop("disabled", true);
      $.ajax({
        url: "/settings/interval",
        data: {interval: $(".input-interval").val()},
        method: "POST",
        dataType: "json"
      }).done(function (response) {
        $(".btn-save").prop("disabled", false);
        if (response.interval) {
          monitoringInterval = response.interval;
          $(".btn-save").hide();
          $(".settings-modal").modal("hide");
        }
      }).fail(function (jqXHR, textStatus) {
        console.log("Request failed while refreshing interval: " + textStatus);
        $(".btn-save").prop("disabled", false);
      });
    });
    $(".settings-modal").on("show.bs.modal", function (e) { // event fires immediately when the show instance method is called
      $(".input-interval").val(monitoringInterval);
      $(".btn-save").hide();
    });

    // create charts
    var temperatureChart = createLineChart($("#chart-temperature"), "Temperature", "220,21,87");
    var humidityChart = createLineChart($("#chart-humidity"), "Humidity", "75,192,192");
    refreshCharts();

  });
</script>
</body>
</html>
