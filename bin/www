#!/usr/bin/env node

var debug = require('debug')('app:server');

/**
 * Initialize database
 */
var db = require("../db");
db.initialize();

/**
 * Initialize serialport
 */
var serialport = require("../serial");
serialport.initialize("/dev/ttyATH0", 9600, function (data) {
  debug("Received data on port: ", data);

  // data format: "xx.xx,xx.xx"
  var dataSplit = data.split(",");
  var temperature = Number(dataSplit[0]);
  var humidity = Number(dataSplit[1]);
  db.insert(temperature, humidity);
});

/**
 * Create HTTP server.
 * Listen on provided port, on all network interfaces.
 */
var port = normalizePort(process.env.PORT || '3000'); // get port from environment and store in Express.
var app = require('../app');
app.set('port', port);

var server = require('http').createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Exit handlers
 */

process.on('exit', function () {
  debug("Cleaning up before exiting program...");
  db.close();
});

process.on('SIGINT', function () {
  debug("Stopping program by Ctrl-C...");
  process.exit(2);
});

process.on('uncaughtException', function (e) {
  debug("Program stopped due to uncaught exception...");
  debug(e.stack);
  process.exit(99);
});
